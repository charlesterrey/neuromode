[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "neuro_offload_model"
version = "0.1.0"
description = "Modèles neuronaux de développement et offloading cognitif (S-1→S-6)"
authors = [
    {name = "Équipe Neurosciences Computationnelles"},
]
maintainers = [
    {name = "Équipe Neurosciences Computationnelles"},
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.10"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Bio-Informatics",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
keywords = [
    "neuroscience", "computational-neuroscience", "brian2", 
    "plasticity", "offloading", "cognitive-modeling"
]

dependencies = [
    "brian2>=2.6.0",
    "numpy>=1.21.0",
    "pandas>=1.3.0",
    "matplotlib>=3.5.0",
    "networkx>=2.6.0",
    "scipy>=1.7.0",
]

[project.optional-dependencies]
viz = [
    "plotly>=5.0.0",
    "nilearn>=0.9.0",
]
tvb = [
    "tvb-library>=2.4.0",
]
render = [
    "brainrender>=2.0.0",
]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-xdist>=3.0.0",
    "flake8>=6.0.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "pre-commit>=3.0.0",
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
    "mkdocstrings[python]>=0.20.0",
    "mypy>=1.0.0",
]
all = [
    "neuro_offload_model[viz,tvb,render,dev]",
]

[project.urls]
Homepage = "https://github.com/your-org/neuro_offload_model"
Documentation = "https://your-org.github.io/neuro_offload_model"
Repository = "https://github.com/your-org/neuro_offload_model"
"Bug Tracker" = "https://github.com/your-org/neuro_offload_model/issues"

[project.scripts]
neuro-s1 = "src.run_s1:main"
neuro-s2 = "src.run_s2:main"
neuro-s3 = "src.run_s3:main"
neuro-s4 = "src.run_s4:main"
neuro-s5 = "src.run_s5:main"
neuro-s6 = "src.run_s6:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["src*"]

[tool.setuptools.package-data]
"*" = ["*.json", "*.yaml", "*.yml", "*.txt", "*.md"]

# Configuration des outils de développement
[tool.black]
line-length = 88
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = '''
/(
  # Exclure certains répertoires
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["src"]
known_third_party = ["brian2", "numpy", "pandas", "matplotlib", "networkx", "scipy"]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false  # Relaxé pour compatibilité Brian2
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --disable-warnings"
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "smoke: marks tests as smoke tests",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
] 