name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Tests hebdomadaires le dimanche √† 3h UTC
    - cron: '0 3 * * 0'

jobs:
  lint-and-format:
    name: Linting & Formatting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          
      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-lint-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-lint-
            
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black isort flake8 mypy
          
      - name: Check formatting with Black
        run: black --check --diff .
        
      - name: Check import sorting with isort
        run: isort --check-only --diff .
        
      - name: Lint with flake8
        run: flake8 src tests
        
      - name: Type check with mypy
        run: mypy src/ || true  # Non-bloquant pour l'instant

  test:
    name: Tests
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ['3.10', '3.11']
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Install system dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            build-essential \
            libglib2.0-0 \
            libsm6 \
            libxext6 \
            libxrender1 \
            libfontconfig1
            
      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-${{ matrix.python-version }}-pip-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.python-version }}-pip-
            
      - name: Install package
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev,viz]
          
      - name: Run unit tests
        run: |
          pytest tests/ -v --cov=src --cov-report=xml --cov-report=term-missing
          
      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.10'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          fail_ci_if_error: false

  smoke-tests:
    name: Smoke Tests (mod√®les courts)
    runs-on: ubuntu-latest
    needs: [test]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            build-essential \
            libglib2.0-0 \
            libsm6 \
            libxext6 \
            libxrender1 \
            libfontconfig1
            
      - name: Install package
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev,viz]
          
      - name: Create configs directory
        run: |
          mkdir -p configs outputs
          
      - name: S-1 Smoke Test
        run: |
          python -c "
          from src.model_s1 import build_network_s1, load_config_s1, run_sim_s1
          import json
          
          # Config minimale pour CI
          config = {
              'seed': 1,
              'duration_ms': 1000,
              'dt_ms': 0.1,
              'N_e': 50, 'N_i': 10,
              'p_connect_EI': 0.1,
              'lif': {'tau_m_ms': 20, 'E_L_mV': -70, 'V_th_mV': -50, 'V_reset_mV': -60, 'refractory_ms': 5},
              'syn': {'gmax_e': 0.6, 'gmax_i': 6.0, 'w_init_mean': 0.5, 'w_init_std': 0.1, 'w_max': 1.0, 'tau_e_ms': 5, 'tau_i_ms': 10},
              'stdp': {'tau_pre_ms': 20, 'tau_post_ms': 20, 'Apre': 0.01, 'Apost': -0.012},
              'scaling': {'enabled': True, 'target_hz': 5.0, 'interval_ms': 500, 'eta_scale': 0.01, 'min_scale': 0.5, 'max_scale': 2.0}
          }
          
          with open('configs/smoke_s1.json', 'w') as f:
              json.dump(config, f, indent=2)
          
          net, monitors = build_network_s1(config)
          run_sim_s1(net, config['duration_ms'], config['scaling'], monitors)
          print('‚úÖ S-1 smoke test r√©ussi')
          "
          
      - name: S-2 Smoke Test
        run: |
          python -c "
          from src.model_s2 import build_network_s2, load_config_s2, run_sim_s2
          import json
          
          # Config S-2 minimale
          config = {
              'seed': 1, 'duration_ms': 2000, 'dt_ms': 0.1,
              'N_e': 50, 'N_i': 10, 'p_connect_EI': 0.1,
              'lif': {'tau_m_ms': 20, 'E_L_mV': -70, 'V_th_mV': -50, 'V_reset_mV': -60, 'refractory_ms': 5},
              'syn': {'gmax_e': 0.6, 'gmax_i': 6.0, 'w_init_mean': 0.5, 'w_init_std': 0.1, 'w_max': 1.0, 'tau_e_ms': 5, 'tau_i_ms': 10},
              'stdp': {'tau_pre_ms': 20, 'tau_post_ms': 20, 'Apre_base': 0.01, 'Apost_base': -0.012},
              'scaling': {'enabled': True, 'target_hz': 5.0, 'interval_ms': 500, 'eta_scale': 0.01, 'min_scale': 0.5, 'max_scale': 2.0},
              'struct': {'dt_struct_ms': 50, 'phase': {'T_grow_ms': 1000, 'T_prune_ms': 2000}, 'rho_target_grow': 0.25, 'max_add_per_step': 100, 'tau_A_ms': 500, 'beta_pre': 0.02, 'beta_post': 0.02, 'theta_act': 0.15, 'k1': 8.0, 'k2': 3.0, 'lambda_len': 1.0, 'max_degree': 200}
          }
          
          net, monitors = build_network_s2(config)
          print('‚úÖ S-2 smoke test r√©ussi')
          "
          
      - name: S-6 Mini Ablation Test
        run: |
          python -c "
          from src.experiments.ablation_s6 import GridRunner
          
          config = {
              'omega': [0.0, 0.5],
              't0_ms': [1000],
              'seeds': [1],
              'replications': 1,
              's4_base_config': 'configs/s4.json'
          }
          
          runner = GridRunner(config)
          print('‚úÖ S-6 ablation test r√©ussi')
          "
          
      - name: Archive artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ci-artifacts-${{ github.run_id }}
          path: |
            outputs/**
            configs/**
            *.log
          retention-days: 7

  integration-tests:
    name: Tests d'int√©gration end-to-end
    runs-on: ubuntu-latest
    needs: [smoke-tests]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            build-essential \
            libglib2.0-0 \
            libsm6 \
            libxext6 \
            libxrender1 \
            libfontconfig1
            
      - name: Install package
        run: |
          python -m pip install --upgrade pip
          pip install -e .[all]
          
      - name: Run integration pipeline
        timeout-minutes: 30
        run: |
          # Pipeline complet mais acc√©l√©r√© pour CI
          python -c "
          print('üöÄ Pipeline d\'int√©gration S-1‚ÜíS-6 (version CI)')
          
          import os
          os.makedirs('outputs/ci_integration', exist_ok=True)
          
          # Test S-1
          from src.model_s1 import build_network_s1
          config_s1 = {'seed': 42, 'duration_ms': 1000, 'dt_ms': 0.1, 'N_e': 40, 'N_i': 8, 'p_connect_EI': 0.1, 'lif': {'tau_m_ms': 20, 'E_L_mV': -70, 'V_th_mV': -50, 'V_reset_mV': -60, 'refractory_ms': 5}, 'syn': {'gmax_e': 0.6, 'gmax_i': 6.0, 'w_init_mean': 0.5, 'w_init_std': 0.1, 'w_max': 1.0, 'tau_e_ms': 5, 'tau_i_ms': 10}, 'stdp': {'tau_pre_ms': 20, 'tau_post_ms': 20, 'Apre': 0.01, 'Apost': -0.012}, 'scaling': {'enabled': True, 'target_hz': 5.0, 'interval_ms': 500, 'eta_scale': 0.01, 'min_scale': 0.5, 'max_scale': 2.0}}
          net, monitors = build_network_s1(config_s1)
          print('‚úÖ S-1 int√©gration OK')
          
          # Test S-6 mini ablation
          from src.experiments.ablation_s6 import GridRunner
          config_s6 = {'omega': [0.0], 't0_ms': [1000], 'seeds': [42], 'replications': 1}
          runner = GridRunner(config_s6)
          print('‚úÖ S-6 int√©gration OK')
          
          print('üéâ Pipeline d\'int√©gration termin√© avec succ√®s')
          "
          
      - name: Archive integration results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-results-${{ github.run_id }}
          path: outputs/ci_integration/**
          retention-days: 14 